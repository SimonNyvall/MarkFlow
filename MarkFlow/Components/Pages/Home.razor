@page "/"

@attribute [StreamRendering(true)]

@rendermode InteractiveServer

@using Microsoft.JSInterop
@using MarkFlow.FileService
@using Markdig

@inject IFileService FileService
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

<div class="wrapper">
  @if (@Html is not null)
  {
    @Html
  }
  else
  {
    <p>loading...</p>
  }
</div>

@code {
    private MarkupString? Html { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (FileService is null) return;

        FileService.OnFileChanged += FileChanged;
        FileService.MonitorFile();

        await LoadFileContent();
    }

    private async Task FileChanged()
    {
        await LoadFileContent();

        NavigationManager.NavigateTo("/", true);
    }

    private async Task LoadFileContent()
    {
        var markdown = await FileService.ReadFileAsync();
        Html = (MarkupString)(Markdown.ToHtml(markdown));
    }
}
